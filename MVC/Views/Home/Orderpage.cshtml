<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Page</title>
    <style>
        /* Your styles here */
    </style>
</head>

<body>
    <div class="order-details">
        <h2>Order Details</h2>
        <p id="order-taste"></p>
        <p id="order-flavor"></p>
        <p id="order-price"></p>
        <div id="guest-info">
            <p id="order-name"></p>
            <p id="order-phone"></p>
            <p id="order-address"></p>
        </div>
    </div>

    <div>
        <h3>Guest ID</h3>
        <p id="guest-id"></p>
    </div>

    <button type="button" onclick="saveGuestCart()">Mua h√†ng</button>

    <script>
        function setCookie(name, value, days) {
            const expires = new Date(Date.now() + days * 864e5).toUTCString();
            document.cookie = `${name}=${encodeURIComponent(value)}; expires=${expires}; path=/`;
        }

        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i].trim();
                if (c.indexOf(nameEQ) === 0) return decodeURIComponent(c.substring(nameEQ.length));
            }
            return null;
        }

        function generateUUID() {
            return 'xxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                const r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
        }

        function initializeGuestId() {
            let guestId = getCookie('guestId');
            if (!guestId) {
                guestId = generateUUID();
                setCookie('guestId', guestId, 30);
            }
            document.getElementById('guest-id').innerText = `Guest ID: ${guestId}`;
            console.log('Guest ID:', guestId);
        }

        function getQueryParams() {
            const params = new URLSearchParams(window.location.search);
            return {
                tasteId: params.get('Taste'),
                flavor: params.get('Flavor'),
                userId: params.get('UserId')
            };
        }

        async function fetchTasteById(tasteId) {
            try {
                const response = await fetch(`http://localhost:5014/api/taste/${tasteId}`);
                if (!response.ok) {
                    throw new Error('Network response was not ok ' + response.statusText);
                }
                return await response.json();
            } catch (error) {
                console.error('Error fetching taste:', error);
            }
        }

        async function fetchFlavorById(flavor) {
            try {
                const response = await fetch(`http://localhost:5014/api/flavors/${flavor}`);
                if (!response.ok) {
                    throw new Error('Network response was not ok ' + response.statusText);
                }
                return await response.json();
            } catch (error) {
                console.error('Error fetching flavor:', error);
            }
        }

        async function calculateTotalPrice(tasteId, flavor) {
            const taste = await fetchTasteById(tasteId);
            const flavorData = await fetchFlavorById(flavor);
            return taste && flavorData ? taste.price + flavorData.price : null;
        }

        async function updateOrderDetails() {
            const params = getQueryParams();
            const tasteId = params.tasteId;
            const flavor = params.flavor;

            const taste = await fetchTasteById(tasteId);
            const flavorData = await fetchFlavorById(flavor);

            if (taste) {
                document.getElementById('order-taste').innerText = `Taste: ${taste.taste}`;
            } else {
                document.getElementById('order-taste').innerText = 'Taste not found';
            }

            if (flavorData) {
                document.getElementById('order-flavor').innerText = `Flavor: ${flavorData.flavor}`;
                document.getElementById('order-price').innerText = `Price: $${flavorData.price}`;
            } else {
                document.getElementById('order-flavor').innerText = 'Flavor not found';
            }

            const totalPrice = await calculateTotalPrice(tasteId, flavor);
            document.getElementById('order-price').innerText = totalPrice !== null
                ? `Total Price: $${totalPrice}`
                : 'Unable to calculate total price';

            const userId = params.userId;
            if (!userId) {
                document.getElementById('guest-info').style.display = 'block';
                document.getElementById('order-name').innerText = `Name: ${getCookie('guestName') || 'N/A'}`;
                document.getElementById('order-phone').innerText = `Phone: ${getCookie('guestPhone') || 'N/A'}`;
                document.getElementById('order-address').innerText = `Address: ${getCookie('guestAddress') || 'N/A'}`;
            } else {
                document.getElementById('guest-info').style.display = 'none';
            }
        }

        async function saveGuestCart() {
            const params = getQueryParams();
            const tasteId = params.tasteId;
            const flavor = params.flavor;

            const name = getCookie('guestName');
            const phone = getCookie('guestPhone');
            const address = getCookie('guestAddress');
            const guestId = getCookie('guestId');

            const taste = await fetchTasteById(tasteId);
            const flavorData = await fetchFlavorById(flavor);

            if (!taste || !flavorData) {
                alert('Taste or Flavor not found. Unable to add to cart.');
                return;
            }

            const guestCartData = {
                Taste: taste.taste,
                Flavor: flavorData.flavor,
                Price: taste.price + flavorData.price,
                Name: name,
                Address: address,
                Phone_Number: phone,
                GuestId: guestId,
                Status: "Waiting"
            };

            try {
                const response = await fetch('http://localhost:5014/api/GuestCart/saveGuestCart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(guestCartData)
                });

                if (!response.ok) {
                    throw new Error('Network response was not ok ' + response.statusText);
                }

                const result = await response.json();
                alert(result.Message);
                window.location.href = '/Admin/GuestCart';

            } catch (error) {
                console.error('Error saving guest cart:', error);
                alert('An error occurred while adding to the guest cart.');
            }
        }


        initializeGuestId();
        updateOrderDetails();
    </script>
</body>

</html>
