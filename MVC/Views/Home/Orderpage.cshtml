<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Page</title>

    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            flex-wrap: wrap;
            gap: 20px;
            padding: 20px;
        }

        .order-details {
            border: 1px solid #ddd;
            padding: 20px;
            border-radius: 5px;
            width: 400px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            text-align: center;
        }

        .order-details h2 {
            margin-bottom: 20px;
        }
    </style>
</head>

<body>
    <div class="order-details">
        <h2>Order Details</h2>
        <p id="order-taste"></p>
        <p id="order-flavor"></p>
        <p id="order-price"></p>
    </div>

    <script>
        function getQueryParams() {
            const params = new URLSearchParams(window.location.search);
            return {
                tasteId: params.get('Taste'),
                flavor: params.get('Flavor'),
                userid: params.get('UserId'),
            };
        }

        async function fetchTasteById(tasteId) {
            try {
                const response = await fetch(`http://localhost:5014/api/taste/${tasteId}`);
                if (!response.ok) {
                    throw new Error('Network response was not ok ' + response.statusText);
                }
                return await response.json();
            } catch (error) {
                console.error('Error fetching taste:', error);
            }
        }

        async function fetchFlavorById(flavor) {
            try {
                const response = await fetch(`http://localhost:5014/api/flavors/${flavor}`);
                if (!response.ok) {
                    throw new Error('Network response was not ok ' + response.statusText);
                }
                return await response.json();
            } catch (error) {
                console.error('Error fetching flavor:', error);
            }
        }

        const params = getQueryParams();
        const tasteId = params.tasteId;
        const flavor = params.flavor;

        async function calculateTotalPrice() {
            const taste = await fetchTasteById(tasteId);
            const flavorData = await fetchFlavorById(flavor);
            return taste && flavorData ? taste.price + flavorData.price : null;
        }

        async function updateOrderDetails() {
            const taste = await fetchTasteById(tasteId);
            const flavorData = await fetchFlavorById(flavor);

            if (taste) {
                document.getElementById('order-taste').innerText = `Taste: ${taste.taste}`;
            } else {
                document.getElementById('order-taste').innerText = 'Taste not found';
            }

            if (flavorData) {
                document.getElementById('order-flavor').innerText = `Flavor: ${flavorData.flavor}`;
                document.getElementById('order-price').innerText = `Price: $${flavorData.price}`;
            } else {
                document.getElementById('order-flavor').innerText = 'Flavor not found';
            }

            const totalPrice = await calculateTotalPrice();
            document.getElementById('order-price').innerText = totalPrice !== null
                ? `Total Price: $${totalPrice}`
                : 'Unable to calculate total price';
        }

        async function saveToCart() {
            const params = getQueryParams();
            const tasteId = params.tasteId;
            const flavor = params.flavor;
            const userid = params.userid;
            const taste = await fetchTasteById(tasteId);
            const flavorData = await fetchFlavorById(flavor);

            if (!taste || !flavorData) {
                alert('Taste or Flavor not found. Unable to add to cart.');
                return;
            }

            const cartData = {
                taste: taste.taste,
                flavor: flavorData.flavor,
                price: taste.price + flavorData.price,
                userid: userid,
                status: "Waiting"
            };

            try {
                const response = await fetch('http://localhost:5014/api/cart/save', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(cartData)
                });

                if (!response.ok) {
                    throw new Error('Network response was not ok ' + response.statusText);
                }

                const result = await response.json();
                alert(result.Message);
                window.location.href = `Usercart?UserId=${userid}`;
            } catch (error) {
                console.error('Error saving to cart:', error);
                alert('An error occurred while adding to the cart.');
            }
        }

        updateOrderDetails();
    </script>

    <button type="button" onclick="saveToCart()">Mua h√†ng</button>

</body>

</html>
